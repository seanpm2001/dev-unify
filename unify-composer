#! /usr/bin/env php
<?php
declare(strict_types=1);
\error_reporting(-1);

require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Finder\Finder;


//******************************************************************************
// Update composer.json files

$jsonOpts = JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE;

$finder = Finder::create()
    ->files()
    ->name('composer.json')
    ->depth('< 2')
    ->in(dirname(__DIR__))
    ->notPath('vendor')
;

foreach ($finder as $file) {
    echo sprintf('Processing %s', $file->getRealPath()) . PHP_EOL;

    // Take the existing file and overlay what we want
    $json    = json_decode(file_get_contents($file->getRealPath()), true);
    $overlay = json_decode(file_get_contents(__DIR__ . '/templates/composer.json.tmpl'), true);
    $merged  = array_merge_recursive_adv($json, $overlay);

    // Delete the things we want to remove
    unset($merged['require-dev']['codeclimate/php-test-reporter']);

    // Sort the results
    natkeysort($merged['config']);
    composersort($merged['require']);
    natkeysort($merged['require-dev']);
    natkeysort($merged['suggest']);

    // Write the file back to disk
    file_put_contents($file->getRealPath(), json_encode($merged, $jsonOpts) . PHP_EOL);

    echo sprintf('Completed %s', $file->getRealPath()) . PHP_EOL;
}


//******************************************************************************
// Functions

function array_merge_recursive_adv(array ...$arrays): array
{
    $master = [];

    foreach ($arrays as $array) {
        foreach ($array as $key => $values) {

            if (!isset($master[$key])) {
                // If it doesn't already exist, add it and keep the incoming contents
                $master[$key] = $values;
            } else {
                // If it DOES exist...
                if (is_scalar($values)) {
                    // Replace the contents
                    $master[$key] = $values;
                } elseif (is_array($values)) {
                    $master[$key] = array_merge_recursive_adv($master[$key], $values);
                }
            }
        }
    }

    return $master;
}

/**
 * Perform a case-insensitive, natural key sort on the associative array.
 *
 * @param array &$array The array to sort. Updates the array in-place.
 */
function natkeysort(&$array): void
{
    uksort($array, function($a, $b): int {
        return strcasecmp($a, $b);
    });
}

/**
 * Perform a custom sort, intended for the "requires" (or "requires-dev") key.
 *
 * @param array &$array The array to sort. Updates the array in-place.
 */
function composersort(&$array): void
{
    // Groups
    $master = [];
    $php    = null;
    $ext    = [];
    $lib    = [];
    $pack   = [];

    // Sift the entries
    foreach ($array as $key => $value) {
        if ('php' === $key) {
            $php = $value;
            unset($array[$key]);
        } elseif ('ext-' === substr($key, 0, 4)) {
            $ext[$key] = $value;
            unset($array[$key]);
        } elseif ('lib-' === substr($key, 0, 4)) {
            $lib[$key] = $value;
            unset($array[$key]);
        }
    }

    // Sort the entries
    natkeysort($ext);
    natkeysort($lib);
    natkeysort($array);

    // Re-merge the entries
    $master['php'] = $php;

    foreach ($ext as $key => $value) {
        $master[$key] = $value;
    }

    foreach ($lib as $key => $value) {
        $master[$key] = $value;
    }

    foreach ($array as $key => $value) {
        $master[$key] = $value;
    }

    // Replace the old array with the new one
    $array = $master;
}
